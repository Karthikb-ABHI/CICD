variables:
  appPoolName: $(appPoolName)        # Defined in Variables tab
  backupRootPath: $(backupRootPath)  # Defined in Variables tab
  buildConfiguration: $(buildConfiguration) # Defined in Variables tab
  deployPath: $(deployPath)          # Defined in Variables tab
  sourcePath: $(sourcePath)          # Defined in Variables tab
  http_proxy: 'http://185.46.212.88:80'
  https_proxy: 'http://185.46.212.88:80'

stages:
- stage: Deploy
  displayName: 'Deploy Application'
  jobs:
  - job: Deployment
    displayName: 'MTPreWEB Deployment'
    pool:
      name: MTPreWEB
    steps:
    - checkout: self
      clean: true
      fetchTags: false
    
    - task: PowerShell@2
      displayName: 'Stop App Pool'
      inputs:
        targetType: inline
        script: '%SYSTEMROOT%\System32\inetsrv\appcmd stop apppool /apppool.name:"$(appPoolName)"'
    
    - task: PowerShell@2
      displayName: 'Backup Current Deployment'
      inputs:
        targetType: inline
        script: |
          if (Test-Path "$(deployPath)") {
            $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
            $backupPath = "$(backupRootPath)\$timestamp"
            New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
            Copy-Item -Recurse -Force "$(deployPath)\*" $backupPath
            Write-Host "##vso[task.setvariable variable=latestBackupPath;isOutput=true]$backupPath"
          }
      name: BackupStep
    
    - task: PowerShell@2
      displayName: 'Restore Dependencies'
      inputs:
        targetType: inline
        script: 'dotnet restore'
    
    - task: PowerShell@2
      displayName: 'Build Project'
      inputs:
        targetType: inline
        script: 'dotnet build --configuration $(buildConfiguration) --no-restore'
    
    - task: PowerShell@2
      displayName: 'Publish Project'
      inputs:
        targetType: inline
        script: 'dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)"'
    
    - task: PowerShell@2
      displayName: 'Deploy to IIS Folder'
      inputs:
        targetType: inline
        script: |
          Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
          Copy-Item -Path "$(sourcePath)\*" -Destination "$(deployPath)\" -Recurse -Force
    
    - task: PowerShell@2
      displayName: 'Start App Pool + Verify'
      inputs:
        targetType: inline
        script: |
          %SYSTEMROOT%\System32\inetsrv\appcmd start apppool /apppool.name:"$(appPoolName)"
          Start-Sleep -Seconds 10
          $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
          if ($status -ne "Started") {
            Write-Error "App Pool failed to start"
          }

- stage: Rollback
  displayName: 'Rollback Deployment'
  dependsOn: Deploy
  condition: failed()
  jobs:
  - job: Rollback
    displayName: 'Execute Rollback'
    pool:
      name: MTPreWEB
    steps:
    - checkout: self
      clean: true
      fetchTags: false
    
    - task: PowerShell@2
      displayName: 'Stop App Pool'
      inputs:
        targetType: inline
        script: '%SYSTEMROOT%\System32\inetsrv\appcmd stop apppool /apppool.name:"$(appPoolName)"'
    
    - task: PowerShell@2
      displayName: 'Restore Backup'
      inputs:
        targetType: inline
        script: |
          $backupPath = "$(Deploy.Deployment.BackupStep.latestBackupPath)"
          if (-not $backupPath) {
            Write-Error "Backup path variable not set. Cannot rollback!"
          }
          if (Test-Path $backupPath) {
            Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
            Copy-Item -Recurse -Force "$backupPath\*" "$(deployPath)\"
          } else {
            Write-Error "Backup folder not found. Cannot rollback!"
          }
    
    - task: PowerShell@2
      displayName: 'Start App Pool After Rollback'
      inputs:
        targetType: inline
        script: |
          %SYSTEMROOT%\System32\inetsrv\appcmd start apppool /apppool.name:"$(appPoolName)"
          Start-Sleep -Seconds 10
          $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
          if ($status -ne "Started") {
            Write-Error "App Pool failed to start after rollback"
          }