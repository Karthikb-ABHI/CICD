name: Build and Deploy .NET 8 App to Azure VM

trigger:
  branches:
    include:
      - main

pool:
  name: MTPreWEB  # Your self-hosted agent pool

variables:
  appPoolName: 'CICDTest'
  sourcePath: 'E:\Temp\CICDTest_Temp'
  deployPath: 'E:\DeployedProjects\CICDTest'
  backupPath: 'E:\Deployments\backup\CICDTest'
  buildConfiguration: 'Release'

stages:
# ======================= Build & Deploy ========================
- stage: DeployStage
  displayName: Build and Deploy
  jobs:
  - job: BuildAndDeploy
    displayName: Build & Deploy to IIS
    steps:

    - checkout: self
      clean: true

    - task: PowerShell@2
      displayName: 'Stop App Pool'
      inputs:
        targetType: 'inline'
        script: |
          & "$env:SYSTEMROOT\System32\inetsrv\appcmd" stop apppool /apppool.name:"$(appPoolName)" || Write-Host "App Pool was already stopped"

    - task: PowerShell@2
      displayName: 'Backup Current Deployment'
      inputs:
        targetType: 'inline'
        script: |
          if (Test-Path "$(deployPath)") {
            if (Test-Path "$(backupPath)") {
              Remove-Item -Recurse -Force "$(backupPath)"
            }
            New-Item -ItemType Directory -Path "$(backupPath)" -Force | Out-Null
            Copy-Item -Path "$(deployPath)\*" -Destination "$(backupPath)" -Recurse -Force
            Write-Host "Backup created at $(backupPath)"
          } else {
            Write-Host "No existing deployment found - skipping backup"
          }

    - task: PowerShell@2
      displayName: 'Restore Dependencies'
      inputs:
        targetType: 'inline'
        script: |
          dotnet restore

    - task: PowerShell@2
      displayName: 'Build Project'
      inputs:
        targetType: 'inline'
        script: |
          dotnet build --configuration $(buildConfiguration) --no-restore

    - task: PowerShell@2
      displayName: 'Publish Project'
      inputs:
        targetType: 'inline'
        script: |
          dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)" --no-build

    - task: PowerShell@2
      displayName: 'Deploy to IIS'
      inputs:
        targetType: 'inline'
        script: |
          if (Test-Path "$(deployPath)") {
            Remove-Item -Path "$(deployPath)\*" -Recurse -Force
          } else {
            New-Item -ItemType Directory -Path "$(deployPath)" -Force | Out-Null
          }
          Copy-Item -Path "$(sourcePath)\*" -Destination "$(deployPath)" -Recurse -Force
          Write-Host "Deployment completed to $(deployPath)"

    - task: PowerShell@2
      displayName: 'Start App Pool & Verify'
      inputs:
        targetType: 'inline'
        script: |
          & "$env:SYSTEMROOT\System32\inetsrv\appcmd" start apppool /apppool.name:"$(appPoolName)"
          Start-Sleep -Seconds 5
          $status = (& "$env:SYSTEMROOT\System32\inetsrv\appcmd" list apppool /apppool.name:"$(appPoolName)" /text:state)
          if ($status -eq "Started") {
            Write-Host "App Pool started successfully"
          } else {
            Write-Error "App Pool failed to start"
            exit 1
          }

# ======================= Rollback ========================
- stage: RollbackStage
  displayName: Rollback Deployment
  dependsOn: DeployStage
  condition: failed()
  jobs:
  - job: RollbackJob
    displayName: Rollback to Previous Version
    steps:

    - task: PowerShell@2
      displayName: 'Stop App Pool'
      inputs:
        targetType: 'inline'
        script: |
          & "$env:SYSTEMROOT\System32\inetsrv\appcmd" stop apppool /apppool.name:"$(appPoolName)"

    - task: PowerShell@2
      displayName: 'Restore Backup'
      inputs:
        targetType: 'inline'
        script: |
          if (-not (Test-Path "$(backupPath)")) {
            Write-Error "##vso[task.logissue type=error]Backup folder not found at $(backupPath)"
            exit 1
          }
          Remove-Item -Path "$(deployPath)\*" -Recurse -Force -ErrorAction SilentlyContinue
          Copy-Item -Path "$(backupPath)\*" -Destination "$(deployPath)" -Recurse -Force
          Write-Host "Rollback completed successfully"

    - task: PowerShell@2
      displayName: 'Start App Pool'
      inputs:
        targetType: 'inline'
        script: |
          & "$env:SYSTEMROOT\System32\inetsrv\appcmd" start apppool /apppool.name:"$(appPoolName)"
          Start-Sleep -Seconds 5
          $status = (& "$env:SYSTEMROOT\System32\inetsrv\appcmd" list apppool /apppool.name:"$(appPoolName)" /text:state)
          if ($status -ne "Started") {
            Write-Error "##vso[task.logissue type=error]App Pool failed to start after rollback"
            exit 1
          }
          Write-Host "App Pool started successfully after rollback"
