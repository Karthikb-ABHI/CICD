name: MTPREE-2.20

trigger:
  branches:
    include:
      - main

pool:
  name: MTPre

variables:
  - name: appPoolName
    value: 'CICDTest'
  - name: sourcePath
    value: 'E:\Temp\CICDTest_Temp'
  - name: publishPath
    value: 'E:\Deployment\CICDTest'
  - name: deployPath
    value: 'E:\DeployedProjects\CICDTest'
  - name: backupRootPath
    value: 'E:\Deployment\Backup\CICDTest'
  - name: buildConfiguration
    value: 'Release'
  - name: Build.DeployAction
    value: 'builddeploy'  # default for dropdown

parameters:
  - name: BuildDeployAction
    displayName: 'Select action'
    type: string
    default: 'builddeploy'
    values:
      - build
      - deploy
      - builddeploy
      - rollback

stages:
- stage: BuildStage
  displayName: Build
  condition: or(eq('${{ parameters.BuildDeployAction }}', 'builddeploy'), eq('${{ parameters.BuildDeployAction }}', 'build'))
  jobs:
  - job: BuildJob
    displayName: Build Package
    steps:
    - checkout: self
      clean: true

    - task: PowerShell@2
      displayName: Restore Dependencies
      inputs:
        targetType: 'inline'
        script: |
          dotnet restore

    - task: PowerShell@2
      displayName: Build Project
      inputs:
        targetType: 'inline'
        script: |
          dotnet build --configuration $(buildConfiguration) --no-restore

    - task: PowerShell@2
      displayName: Publish and Package
      name: PublishPackage
      inputs:
        targetType: 'inline'
        script: |
          dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)"
          $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
          New-Item -Path "$(publishPath)" -ItemType Directory -Force -ErrorAction SilentlyContinue
          $zipPath = "$(publishPath)\CICDTest_Publish_$timestamp.zip"
          Compress-Archive -Path "$(sourcePath)\*" -DestinationPath $zipPath -Force
          Write-Host "##vso[task.setvariable variable=publishZipPath;isOutput=true]$zipPath"
          Write-Host "##[section]Build package created at $zipPath"

- stage: DeployStage
  displayName: Deploy
  dependsOn: BuildStage
  condition: or(eq('${{ parameters.BuildDeployAction }}', 'builddeploy'), eq('${{ parameters.BuildDeployAction }}', 'deploy'))
  jobs:
  - job: DeployJob
    displayName: Deploy to IIS
    variables:
      publishZipPath: $[ stageDependencies.BuildStage.BuildJob.outputs['PublishPackage.publishZipPath'] ]
    steps:
    - task: PowerShell@2
      displayName: Validate Build Artifact
      inputs:
        targetType: 'inline'
        script: |
          if (-not (Test-Path "$(publishZipPath)")) {
              throw "Build artifact not found at: $(publishZipPath)"
          }

    - task: PowerShell@2
      displayName: Stop App Pool
      inputs:
        targetType: 'inline'
        script: |
          try {
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Stopped") {
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$(appPoolName)"
                  Start-Sleep -Seconds 10
              }
          } catch {
              Write-Host "##vso[task.logissue type=error]Failed to stop app pool: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: Backup Current Deployment
      inputs:
        targetType: 'inline'
        script: |
          if (Test-Path "$(deployPath)") {
              $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
              $backupPath = "$(backupRootPath)\CICDTest_$timestamp.zip"
              Compress-Archive -Path "$(deployPath)\*" -DestinationPath $backupPath -Force
              Write-Host "##vso[task.setvariable variable=latestBackupPath;isOutput=true]$backupPath"
              Write-Host "##[section]Backup created at $backupPath"
          }

    - task: PowerShell@2
      displayName: Deploy Files
      inputs:
        targetType: 'inline'
        script: |
          Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
          Expand-Archive -Path "$(publishZipPath)" -DestinationPath "$(deployPath)" -Force

    - task: PowerShell@2
      displayName: Start App Pool
      inputs:
        targetType: 'inline'
        script: |
          & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
          Start-Sleep -Seconds 10

- stage: WaitForApprovalStage
  displayName: Manual Approval
  dependsOn: DeployStage
  condition: succeeded()
  jobs:
  - job: WaitJob
    displayName: Wait for Approval
    pool: server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: |
          karthik.4-v@adityabirlacapital.com
        instructions: 'Please validate deployment. Approve to finish or reject to trigger rollback.'
        onTimeout: reject
      timeoutInMinutes: 60

- stage: RollbackStage
  displayName: Rollback
  dependsOn: WaitForApprovalStage
  condition: or(eq(dependencies.WaitForApprovalStage.jobs.WaitJob.result, 'Rejected'), eq('${{ parameters.BuildDeployAction }}', 'rollback'))
  jobs:
  - job: RollbackJob
    displayName: Execute Rollback
    steps:
    - task: PowerShell@2
      displayName: Find Latest Backup
      inputs:
        targetType: 'inline'
        script: |
          $latestBackup = Get-ChildItem "$(backupRootPath)" -Filter '*.zip' | Sort-Object CreationTime -Descending | Select-Object -First 1
          if (-not $latestBackup) {
              Write-Host "##vso[task.logissue type=error]No backup files found in $(backupRootPath)"
              exit 1
          }
          Write-Host "##vso[task.setvariable variable=latestBackupPath]$($latestBackup.FullName)"
          Write-Host "##[section]Rollback will use: $($latestBackup.FullName)"

    - task: PowerShell@2
      displayName: Stop App Pool
      inputs:
        targetType: 'inline'
        script: |
          try {
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Stopped") {
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$(appPoolName)"
                  Start-Sleep -Seconds 10
              }
          } catch {
              Write-Host "##vso[task.logissue type=error]Failed to stop app pool: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: Restore Backup
      inputs:
        targetType: 'inline'
        script: |
          Expand-Archive -Path "$(latestBackupPath)" -DestinationPath "$(deployPath)" -Force
          Write-Host "##[section]Rollback completed"

    - task: PowerShell@2
      displayName: Start App Pool
      inputs:
        targetType: 'inline'
        script: |
          & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
          Start-Sleep -Seconds 10
