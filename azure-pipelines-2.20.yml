name: MTPREE-2.20

trigger:
  branches:
    include:
      - main

pool:
  name: MTPre

variables:
  appPoolName: 'CICDTest'
  sourcePath: 'E:\Temp\CICDTest_Temp'
  publishPath: 'E:\Deployment\CICDTest'
  deployPath: 'E:\DeployedProjects\CICDTest'
  backupRootPath: 'E:\Deployment\Backup\CICDTest'
  buildConfiguration: 'Release'

stages:
- stage: BuildStage
  displayName: Build Only
  condition: eq(variables['Build.DeployAction'], 'build')
  jobs:
  - job: BuildJob
    displayName: Build Package
    steps:
    - checkout: self
      clean: true

    - task: PowerShell@2
      displayName: 'Restore Dependencies'
      inputs:
        targetType: 'inline'
        script: |
          dotnet restore

    - task: PowerShell@2
      displayName: 'Build Project'
      inputs:
        targetType: 'inline'
        script: |
          dotnet build --configuration $(buildConfiguration) --no-restore

    - task: PowerShell@2
      displayName: 'Publish and Package'
      inputs:
        targetType: 'inline'
        script: |
          dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)"
          $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
          New-Item -Path "$(publishPath)" -ItemType Directory -Force -ErrorAction SilentlyContinue
          $zipPath = "$(publishPath)\CICDTest_Publish_$timestamp.zip"
          Compress-Archive -Path "$(sourcePath)\*" -DestinationPath $zipPath -Force
          Write-Host "##vso[task.setvariable variable=publishZipPath;isOutput=true]$zipPath"

    - task: PowerShell@2
      displayName: 'Cleanup Temp Files'
      inputs:
        targetType: 'inline'
        script: |
          if (Test-Path "$(sourcePath)") {
              Remove-Item -Recurse -Force "$(sourcePath)\*" -ErrorAction SilentlyContinue
          }

- stage: DeployStage
  displayName: Deploy Only
  dependsOn: BuildStage
  condition: eq(variables['Build.DeployAction'], 'deploy')
  jobs:
  - job: DeployJob
    displayName: Deploy to IIS
    variables:
      publishZipPath: $[ stageDependencies.BuildStage.BuildJob.outputs['task_PublishAndPackage.publishZipPath'] ]
    steps:
    - task: PowerShell@2
      displayName: 'Stop App Pool (Graceful)'
      inputs:
        targetType: 'inline'
        script: |
          try {
              $status = (Get-WebAppPoolState -Name "$(appPoolName)" -ErrorAction Stop).Value
              if ($status -eq "Stopped") {
                  Write-Host "##[section]App pool already stopped. Proceeding."
              } 
              else {
                  Write-Host "##[section]Stopping app pool..."
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$(appPoolName)"
                  Start-Sleep -Seconds 10
                  $statusAfter = (Get-WebAppPoolState -Name "$(appPoolName)").Value
                  if ($statusAfter -ne "Stopped") {
                      throw "App pool failed to stop after stop command."
                  }
                  Write-Host "##[section]App pool successfully stopped."
              }
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Failed to stop app pool: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Backup Current Deployment'
      inputs:
        targetType: 'inline'
        script: |
          if (Test-Path "$(deployPath)") {
              $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
              $backupPath = "$(backupRootPath)\CICDTest_$timestamp.zip"
              try {
                  Compress-Archive -Path "$(deployPath)\*" -DestinationPath $backupPath -Force
                  Write-Host "##vso[task.setvariable variable=latestBackupPath;isOutput=true]$backupPath"
                  Write-Host "##[section]Backup created at $backupPath"
              }
              catch {
                  Write-Host "##vso[task.logissue type=error]Backup failed: $_"
                  exit 1
              }
          }

    - task: PowerShell@2
      displayName: 'Deploy to IIS'
      inputs:
        targetType: 'inline'
        script: |
          Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
          Expand-Archive -Path "$(publishZipPath)" -DestinationPath "$(deployPath)" -Force

    - task: PowerShell@2
      displayName: 'Start App Pool'
      inputs:
        targetType: 'inline'
        script: |
          & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
          Start-Sleep -Seconds 10
          $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
          if ($status -ne "Started") {
              Write-Host "##vso[task.logissue type=error]App Pool failed to start (Current status: $status)"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Cleanup Old Archives'
      inputs:
        targetType: 'inline'
        script: |
          $cutoffDate = (Get-Date).AddDays(-15)
          Get-ChildItem "$(publishPath)", "$(backupRootPath)" -Filter '*.zip' |
              Where-Object { $_.CreationTime -lt $cutoffDate } |
              Remove-Item -Force -ErrorAction SilentlyContinue

- stage: RollbackStage
  displayName: Rollback Only
  condition: eq(variables['Build.DeployAction'], 'rollback')
  jobs:
  - job: RollbackJob
    displayName: Execute Rollback
    steps:
    - task: PowerShell@2
      displayName: 'Find Latest Backup'
      inputs:
        targetType: 'inline'
        script: |
          $latestBackup = Get-ChildItem "$(backupRootPath)" -Filter '*.zip' | 
                          Sort-Object CreationTime -Descending | 
                          Select-Object -First 1
          if (-not $latestBackup) {
              Write-Host "##vso[task.logissue type=error]No backup files found"
              exit 1
          }
          Write-Host "##vso[task.setvariable variable=latestBackupPath]$($latestBackup.FullName)"
          Write-Host "##[section]Using backup: $($latestBackup.FullName)"

    - task: PowerShell@2
      displayName: 'Stop App Pool (Graceful)'
      inputs:
        targetType: 'inline'
        script: |
          try {
              $status = (Get-WebAppPoolState -Name "$(appPoolName)" -ErrorAction Stop).Value
              if ($status -eq "Stopped") {
                  Write-Host "##[section]App pool already stopped. Proceeding."
              } 
              else {
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$(appPoolName)"
                  Start-Sleep -Seconds 10
                  $statusAfter = (Get-WebAppPoolState -Name "$(appPoolName)").Value
                  if ($statusAfter -ne "Stopped") {
                      throw "App pool failed to stop after stop command."
                  }
              }
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Failed to stop app pool: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Restore Backup'
      inputs:
        targetType: 'inline'
        script: |
          Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
          Expand-Archive -Path "$(latestBackupPath)" -DestinationPath "$(deployPath)" -Force
          Write-Host "##[section]Rollback completed using backup: $(latestBackupPath)"

    - task: PowerShell@2
      displayName: 'Start App Pool'
      inputs:
        targetType: 'inline'
        script: |
          & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
          Start-Sleep -Seconds 10
          $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
          if ($status -ne "Started") {
              Write-Host "##vso[task.logissue type=error]App Pool failed to start after rollback"
              exit 1
          }