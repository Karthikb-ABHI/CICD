name: MTPREE-2.20

trigger:
  branches:
    include:
      - main

pool:
  name: MTPre  # Your self-hosted agent pool

variables:
  appPoolName: 'CICDTest'
  sourcePath: 'E:\Temp\CICDTest_Temp'
  deployPath: 'E:\DeployedProjects\CICDTest'
  backupRootPath: 'E:\Deployments\backup\CICDTest'
  buildConfiguration: 'Release'

stages:
# ======================= Build & Deploy ========================
- stage: DeployStage
  displayName: Build and Deploy
  jobs:
    - job: BuildAndDeploy
      displayName: Build & Deploy to IIS
      steps:
        - checkout: self
          clean: true

        - task: PowerShell@2
          displayName: 'Stop App Pool'
          inputs:
            targetType: 'inline'
            script: |
              C:\Windows\System32\inetsrv\appcmd.exe stop apppool /apppool.name:"$(appPoolName)"
              Start-Sleep -Seconds 60

        - task: PowerShell@2
          displayName: 'Backup Current Deployment (Compressed)'
          inputs:
            targetType: 'inline'
            script: |
              if (Test-Path "$(deployPath)") {
                $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
                $backupPath = "$(backupRootPath)\CICDTest_$timestamp.zip"
                Compress-Archive -Path "$(deployPath)\*" -DestinationPath $backupPath -Force
                Write-Host "##vso[task.setvariable variable=latestBackupPath]$backupPath"
              }

        - task: PowerShell@2
          displayName: 'Restore Dependencies'
          inputs:
            targetType: 'inline'
            script: |
              dotnet restore

        - task: PowerShell@2
          displayName: 'Build Project'
          inputs:
            targetType: 'inline'
            script: |
              dotnet build --configuration $(buildConfiguration) --no-restore

        - task: PowerShell@2
          displayName: 'Publish Project'
          inputs:
            targetType: 'inline'
            script: |
              dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)"

        - task: PowerShell@2
          displayName: 'Deploy to IIS Folder'
          inputs:
            targetType: 'inline'
            script: |
              Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
              Copy-Item -Path "$(sourcePath)\*" -Destination "$(deployPath)\" -Recurse -Force

        - task: PowerShell@2
          displayName: 'Start App Pool + Verify'
          inputs:
            targetType: 'inline'
            script: |
              C:\Windows\System32\inetsrv\appcmd.exe start apppool /apppool.name:"$(appPoolName)"
              Start-Sleep -Seconds 10
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Started") {
                Write-Error "App Pool failed to start"
              }

# ======================= Manual Approval ========================
- stage: ApprovalStage
  displayName: Manual Sanity Check Approval
  dependsOn: DeployStage
  jobs:
    - job: WaitForApproval
      displayName: Wait for manual approval
      pool: server
      steps:
        - task: ManualValidation@0
          timeoutInMinutes: 60  # Timeout if no response in 60 minutes
          inputs:
            notifyUsers: |
              karthik.4-v@adityabirlacapital.com
              
            instructions: 'Please validate deployment sanity and approve or reject.'
            onTimeout: 'reject'

# ======================= Rollback ========================
- stage: RollbackStage
  displayName: Rollback Deployment
  dependsOn: ApprovalStage
  condition: eq(dependencies.ApprovalStage.outputs['ManualValidation.approvalStatus'], 'Rejected')
  jobs:
    - job: RollbackJob
      displayName: Rollback to Previous Version
      steps:
        - task: PowerShell@2
          displayName: 'Stop App Pool'
          inputs:
            targetType: 'inline'
            script: |
              C:\Windows\System32\inetsrv\appcmd.exe stop apppool /apppool.name:"$(appPoolName)"
              Start-Sleep -Seconds 60

        - task: PowerShell@2
          displayName: 'Restore Backup'
          inputs:
            targetType: 'inline'
            script: |
              $backupPath = "$(latestBackupPath)"
              if (-not $backupPath) {
                Write-Error "Backup path variable not set. Cannot rollback!"
              }
              if (Test-Path $backupPath) {
                Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
                Expand-Archive -Path "$backupPath" -DestinationPath "$(deployPath)" -Force
              } else {
                Write-Error "Backup file not found. Cannot rollback!"
              }

        - task: PowerShell@2
          displayName: 'Start App Pool After Rollback'
          inputs:
            targetType: 'inline'
            script: |
              C:\Windows\System32\inetsrv\appcmd.exe start apppool /apppool.name:"$(appPoolName)"
              Start-Sleep -Seconds 10
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Started") {
                Write-Error "App Pool failed to start after rollback"
              }
