name: MTPREE-2.20

trigger:
  branches:
    include:
      - main

pool:
  name: MTPre

variables:
  appPoolName: 'CICDTest'
  sourcePath: 'E:\Temp\CICDTest_Temp'
  publishPath: 'E:\Deployment\CICDTest'
  deployPath: 'E:\DeployedProjects\CICDTest'
  backupRootPath: 'E:\Deployments\backup\CICDTest'
  buildConfiguration: 'Release'

stages:
- stage: DeployStage
  displayName: Build and Deploy
  jobs:
  - job: BuildAndDeploy
    displayName: Build & Deploy to IIS
    steps:
    - checkout: self
      clean: true

    - task: PowerShell@2
      displayName: 'Stop App Pool (Graceful)'
      inputs:
        targetType: 'inline'
        script: |
          try {
              $status = (Get-WebAppPoolState -Name "$(appPoolName)" -ErrorAction Stop).Value
              if ($status -eq "Stopped") {
                  Write-Host "##[section]App pool already stopped. Proceeding."
              } 
              else {
                  Write-Host "##[section]Stopping app pool..."
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$(appPoolName)"
                  Start-Sleep -Seconds 10
                  $statusAfter = (Get-WebAppPoolState -Name "$(appPoolName)").Value
                  if ($statusAfter -ne "Stopped") {
                      throw "App pool failed to stop after stop command."
                  }
                  Write-Host "##[section]App pool successfully stopped."
              }
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Failed to stop app pool: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Backup Current Deployment'
      inputs:
        targetType: 'inline'
        script: |
          if (Test-Path "$(deployPath)") {
              $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
              $backupPath = "$(backupRootPath)\CICDTest_$timestamp.zip"
              try {
                  Compress-Archive -Path "$(deployPath)\*" -DestinationPath $backupPath -Force
                  Write-Host "##vso[task.setvariable variable=latestBackupPath]$backupPath"
                  Write-Host "##[section]Backup created at $backupPath"
              }
              catch {
                  Write-Host "##vso[task.logissue type=error]Backup failed: $_"
                  exit 1
              }
          }

    - task: PowerShell@2
      displayName: 'Restore Dependencies'
      inputs:
        targetType: 'inline'
        script: |
          try {
              dotnet restore
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Restore failed: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Build Project'
      inputs:
        targetType: 'inline'
        script: |
          try {
              dotnet build --configuration $(buildConfiguration) --no-restore
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Build failed: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Publish and Package'
      inputs:
        targetType: 'inline'
        script: |
          try {
              dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)"
              $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
              New-Item -Path "$(publishPath)" -ItemType Directory -Force -ErrorAction SilentlyContinue
              $zipPath = "$(publishPath)\CICDTest_Publish_$timestamp.zip"
              Compress-Archive -Path "$(sourcePath)\*" -DestinationPath $zipPath -Force
              Write-Host "##vso[task.setvariable variable=publishZipPath]$zipPath"
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Publish failed: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Deploy to IIS'
      inputs:
        targetType: 'inline'
        script: |
          try {
              Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
              Expand-Archive -Path "$(publishZipPath)" -DestinationPath "$(deployPath)" -Force
              Write-Host "##[section]Deployment completed to $(deployPath)"
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Deployment failed: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Start App Pool'
      inputs:
        targetType: 'inline'
        script: |
          try {
              & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
              Start-Sleep -Seconds 10
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Started") {
                  throw "App Pool failed to start (Current status: $status)"
              }
              Write-Host "##[section]App Pool started successfully"
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Start App Pool failed: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Cleanup'
      inputs:
        targetType: 'inline'
        script: |
          try {
              # Clean temp files
              if (Test-Path "$(sourcePath)") {
                  Remove-Item -Recurse -Force "$(sourcePath)\*" -ErrorAction SilentlyContinue
              }
              
              # Clean old archives (15+ days)
              $cutoffDate = (Get-Date).AddDays(-15)
              Get-ChildItem "$(publishPath)", "$(backupRootPath)" -Filter '*.zip' | 
                  Where-Object { $_.CreationTime -lt $cutoffDate } | 
                  Remove-Item -Force -ErrorAction SilentlyContinue
          }
          catch {
              Write-Host "##vso[task.logissue type=warning]Cleanup failed: $_"
          }

- stage: ApprovalStage
  displayName: Manual Approval
  dependsOn: DeployStage
  jobs:
  - job: WaitForApproval
    displayName: Wait for approval
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 60
      inputs:
        notifyUsers: |
          karthik.4-v@adityabirlacapital.com
        instructions: 'Please validate deployment and approve/reject'
        onTimeout: 'reject'

- stage: RollbackStage
  displayName: Rollback
  dependsOn: ApprovalStage
  condition: or(eq(dependencies.ApprovalStage.result, 'Rejected'), eq(dependencies.ApprovalStage.result, 'TimedOut'))
  jobs:
  - job: RollbackJob
    displayName: Execute Rollback
    steps:
    - task: PowerShell@2
      displayName: 'Stop App Pool (Graceful)'
      inputs:
        targetType: 'inline'
        script: |
          try {
              $status = (Get-WebAppPoolState -Name "$(appPoolName)" -ErrorAction Stop).Value
              if ($status -eq "Stopped") {
                  Write-Host "##[section]App pool already stopped. Proceeding."
              } 
              else {
                  Write-Host "##[section]Stopping app pool..."
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$(appPoolName)"
                  Start-Sleep -Seconds 10
                  $statusAfter = (Get-WebAppPoolState -Name "$(appPoolName)").Value
                  if ($statusAfter -ne "Stopped") {
                      throw "App pool failed to stop after stop command."
                  }
                  Write-Host "##[section]App pool successfully stopped."
              }
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Failed to stop app pool: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Restore Backup'
      inputs:
        targetType: 'inline'
        script: |
          try {
              if (-not $(latestBackupPath)) {
                  throw "Backup path not available"
              }
              Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
              Expand-Archive -Path "$(latestBackupPath)" -DestinationPath "$(deployPath)" -Force
              Write-Host "##[section]Backup restored from $(latestBackupPath)"
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Restore failed: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Start App Pool'
      inputs:
        targetType: 'inline'
        script: |
          try {
              & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
              Start-Sleep -Seconds 10
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Started") {
                  throw "App Pool failed to start after rollback"
              }
              Write-Host "##[section]App Pool restarted after rollback"
          }
          catch {
              Write-Host "##vso[task.logissue type=error]Start App Pool failed: $_"
              exit 1
          }