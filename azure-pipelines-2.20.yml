name: MTPREE-2.20

trigger:
  branches:
    include:
    - main

pool:
  name: MTPre

parameters:
- name: action
  displayName: 'Select action (build, deploy, builddeploy, rollback)'
  type: string
  default: 'builddeploy'
  values:
  - build
  - deploy
  - builddeploy
  - rollback

variables:
- name: appPoolName
  value: 'CICDTest'
- name: sourcePath
  value: 'E:\Temp\CICDTest_Temp'
- name: publishPath
  value: 'E:\Deployment\CICDTest'
- name: deployPath
  value: 'E:\DeployedProjects\CICDTest'
- name: backupRootPath
  value: 'E:\Deployment\Backup\CICDTest'
- name: buildConfiguration
  value: 'Release'

stages:

# BUILD STAGE
- stage: BuildStage
  displayName: Build
  condition: or(eq('${{ parameters.action }}', 'build'), eq('${{ parameters.action }}', 'builddeploy'))
  jobs:
  - job: BuildJob
    displayName: Build Package
    steps:
    - checkout: self
      clean: true

    - task: PowerShell@2
      displayName: 'Restore Dependencies'
      inputs:
        targetType: 'inline'
        script: |
          dotnet restore

    - task: PowerShell@2
      displayName: 'Build Project'
      inputs:
        targetType: 'inline'
        script: |
          dotnet build --configuration $(buildConfiguration) --no-restore

    - task: PowerShell@2
      displayName: 'Publish and Package'
      name: PublishPackage
      inputs:
        targetType: 'inline'
        script: |
          dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)"
          $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
          New-Item -Path "$(publishPath)" -ItemType Directory -Force -ErrorAction SilentlyContinue
          $zipPath = "$(publishPath)\CICDTest_Publish_$timestamp.zip"
          Compress-Archive -Path "$(sourcePath)\*" -DestinationPath $zipPath -Force
          Write-Host "##vso[task.setvariable variable=publishZipPath;isOutput=true]$zipPath"
          Write-Host "##[section]Build package created at $zipPath"

    - task: PowerShell@2
      displayName: 'Cleanup Temp Files'
      inputs:
        targetType: 'inline'
        script: |
          if (Test-Path "$(sourcePath)") {
              Remove-Item -Recurse -Force "$(sourcePath)\*" -ErrorAction SilentlyContinue
              Write-Host "##[section]Cleaned up temp files"
          }

# DEPLOY STAGE
- stage: DeployStage
  displayName: Deploy
  dependsOn: BuildStage
  condition: or(eq('${{ parameters.action }}', 'deploy'), eq('${{ parameters.action }}', 'builddeploy'))
  jobs:
  - job: DeployJob
    displayName: Deploy to IIS
    variables:
      publishZipPath: $[ stageDependencies.BuildStage.BuildJob.outputs['PublishPackage.publishZipPath'] ]
    steps:
    - task: PowerShell@2
      displayName: 'Select Latest Build Artifact (if no build)'
      condition: eq('${{ parameters.action }}', 'deploy')
      inputs:
        targetType: 'inline'
        script: |
          $latest = Get-ChildItem "$(publishPath)" -Filter '*.zip' | Sort-Object CreationTime -Descending | Select-Object -First 1
          if (-not $latest) {
              throw "No build artifact found in $(publishPath)"
          }
          Write-Host "##vso[task.setvariable variable=publishZipPath]$($latest.FullName)"
          Write-Host "##[section]Selected build artifact: $($latest.FullName)"

    - task: PowerShell@2
      displayName: 'Stop App Pool'
      inputs:
        targetType: 'inline'
        script: |
          try {
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Stopped") {
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$(appPoolName)"
                  Start-Sleep -Seconds 10
              }
          } catch {
              Write-Host "##vso[task.logissue type=error]Failed to stop app pool: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Backup Current Deployment'
      inputs:
        targetType: 'inline'
        script: |
          if (Test-Path "$(deployPath)") {
              $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
              $backupPath = "$(backupRootPath)\CICDTest_$timestamp.zip"
              Compress-Archive -Path "$(deployPath)\*" -DestinationPath $backupPath -Force
              Write-Host "##[section]Backup created at $backupPath"
          } else {
              Write-Host "##[section]No existing deployment found, skipping backup"
          }

    - task: PowerShell@2
      displayName: 'Deploy Files'
      inputs:
        targetType: 'inline'
        script: |
          Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
          Expand-Archive -Path "$(publishZipPath)" -DestinationPath "$(deployPath)" -Force
          Write-Host "##[section]Deployment completed"

    - task: PowerShell@2
      displayName: 'Start App Pool'
      inputs:
        targetType: 'inline'
        script: |
          & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
          Start-Sleep -Seconds 10
          $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
          if ($status -ne "Started") {
              Write-Host "##vso[task.logissue type=error]App Pool failed to start (Current status: $status)"
              exit 1
          }
          Write-Host "##[section]App pool started successfully"

# ROLLBACK STAGE
- stage: RollbackStage
  displayName: Rollback
  condition: eq('${{ parameters.action }}', 'rollback')
  dependsOn: []
  jobs:
  - job: RollbackJob
    displayName: Execute Rollback
    steps:
    - task: PowerShell@2
      displayName: 'Find Latest Backup'
      inputs:
        targetType: 'inline'
        script: |
          $latestBackup = Get-ChildItem "$(backupRootPath)" -Filter '*.zip' | Sort-Object CreationTime -Descending | Select-Object -First 1
          if (-not $latestBackup) {
              throw "No backup found in $(backupRootPath)"
          }
          Write-Host "##vso[task.setvariable variable=latestBackupPath]$($latestBackup.FullName)"
          Write-Host "##[section]Latest backup: $($latestBackup.FullName)"

    - task: PowerShell@2
      displayName: 'Stop App Pool'
      inputs:
        targetType: 'inline'
        script: |
          try {
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Stopped") {
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$(appPoolName)"
                  Start-Sleep -Seconds 10
              }
          } catch {
              Write-Host "##vso[task.logissue type=error]Failed to stop app pool: $_"
              exit 1
          }

    - task: PowerShell@2
      displayName: 'Restore Backup'
      inputs:
        targetType: 'inline'
        script: |
          Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
          Expand-Archive -Path "$(latestBackupPath)" -DestinationPath "$(deployPath)" -Force
          Write-Host "##[section]Rollback completed"

    - task: PowerShell@2
      displayName: 'Start App Pool'
      inputs:
        targetType: 'inline'
        script: |
          & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
          Start-Sleep -Seconds 10
          $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
          if ($status -ne "Started") {
              Write-Host "##vso[task.logissue type=error]App Pool failed to start after rollback"
              exit 1
          }
          Write-Host "##[section]App pool started successfully"
