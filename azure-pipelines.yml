name: Build and Deploy .NET 8 App to Azure VM

trigger:
  branches:
    include:
      - main

variables:
  # Non-sensitive configuration
  appPoolName: 'healthinsurance'
  sourcePath: 'E:\Temp\CICDTest_Temp'
  deployPath: 'E:\DeployedProjects\CICDTest'
  backupRootPath: 'E:\Deployments\backup\CICDTest'
  buildConfiguration: 'Release'
  proxyAddress: '185.46.212.88:80'
  NO_PROXY: 'localhost,127.0.0.1'

pool:
  name: MTPreWeb

stages:
- stage: DeployStage
  displayName: Build and Deploy
  jobs:
    - job: BuildAndDeploy
      displayName: Build & Deploy to IIS
      steps:
        - checkout: self
          clean: true

        # Configure proxy environment
        - task: PowerShell@2
          displayName: 'Configure Proxy Settings'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "Configuring proxy environment..."
              
              # Get credentials from environment variables
              $proxyUser = "$env:PROXY_USERNAME"
              $proxyPass = "$env:PROXY_PASSWORD"
              $proxyUrl = "http://${proxyUser}:${proxyPass}@$env:PROXY_ADDRESS"
              
              # Configure system proxy
              [System.Net.WebRequest]::DefaultWebProxy = New-Object System.Net.WebProxy($proxyUrl)
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
              
              # Configure environment variables for child processes
              [Environment]::SetEnvironmentVariable("HTTP_PROXY", $proxyUrl, "Process")
              [Environment]::SetEnvironmentVariable("HTTPS_PROXY", $proxyUrl, "Process")
              [Environment]::SetEnvironmentVariable("NO_PROXY", "$env:NO_PROXY", "Process")
              
              # Configure NuGet
              & dotnet nuget update source "nuget.org" --source "https://api.nuget.org/v3/index.json"
              
              Write-Host "Proxy configuration complete"
          env:
            PROXY_USERNAME: $(proxyUsername)  # Set as secret variable
            PROXY_PASSWORD: $(proxyPassword)  # Set as secret variable
            PROXY_ADDRESS: $(proxyAddress)
            NO_PROXY: $(NO_PROXY)

        - task: PowerShell@2
          displayName: 'Stop App Pool'
          inputs:
            targetType: 'inline'
            script: |
              $appPoolName = "$(appPoolName)"
              try {
                  Import-Module WebAdministration -ErrorAction SilentlyContinue
                  $status = (Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue).Value
                  if ($status -eq "Started") {
                      & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$appPoolName" 2>&1 | Out-Null
                      Write-Host "Successfully stopped App Pool '$appPoolName'"
                  }
                  else {
                      Write-Host "App Pool '$appPoolName' was already stopped"
                  }
              }
              catch {
                  Write-Host "##vso[task.logissue type=warning]Warning: $_"
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$appPoolName" 2>&1 | Out-Null
              }
            failOnStderr: false

        - task: PowerShell@2
          displayName: 'Backup Current Deployment'
          inputs:
            targetType: 'inline'
            script: |
              if (Test-Path "$(deployPath)") {
                  $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
                  $backupPath = "$(backupRootPath)\$timestamp"
                  New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
                  Copy-Item -Recurse -Force "$(deployPath)\*" "$backupPath"
                  Write-Host "##vso[task.setvariable variable=latestBackupPath]$backupPath"
                  Write-Host "Backup created at $backupPath"
              }
              else {
                  Write-Host "No existing deployment found at $(deployPath)"
              }

        - task: PowerShell@2
          displayName: 'Restore Dependencies'
          inputs:
            targetType: 'inline'
            script: |
              $maxRetries = 3
              $retryCount = 0
              $success = $false
              
              while (-not $success -and $retryCount -lt $maxRetries) {
                  try {
                      Write-Host "Restore attempt $($retryCount + 1)..."
                      dotnet restore --interactive --verbosity detailed
                      if ($LASTEXITCODE -eq 0) {
                          $success = $true
                      }
                  }
                  catch {
                      Write-Host "##vso[task.logissue type=warning]Attempt failed: $_"
                      $retryCount++
                      if ($retryCount -lt $maxRetries) {
                          Start-Sleep -Seconds (10 * $retryCount)
                          dotnet nuget locals all --clear
                      }
                  }
              }
              
              if (-not $success) {
                  Write-Error "All restore attempts failed"
                  exit 1
              }
          env:
            HTTP_PROXY: $(HTTP_PROXY)
            HTTPS_PROXY: $(HTTPS_PROXY)
            DOTNET_SYSTEM_NET_HTTP_USEPROXY: 'true'

        - task: PowerShell@2
          displayName: 'Build Project'
          inputs:
            targetType: 'inline'
            script: |
              dotnet build --configuration $(buildConfiguration) --no-restore

        - task: PowerShell@2
          displayName: 'Publish Project'
          inputs:
            targetType: 'inline'
            script: |
              dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)"

        - task: PowerShell@2
          displayName: 'Deploy to IIS Folder'
          inputs:
            targetType: 'inline'
            script: |
              Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
              Copy-Item -Path "$(sourcePath)\*" -Destination "$(deployPath)\" -Recurse -Force
              Write-Host "Deployment completed to $(deployPath)"

        - task: PowerShell@2
          displayName: 'Start App Pool + Verify'
          inputs:
            targetType: 'inline'
            script: |
              & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
              Start-Sleep -Seconds 5
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Started") {
                  Write-Error "App Pool failed to start (Current status: $status)"
                  exit 1
              }
              Write-Host "App Pool started successfully"

- stage: RollbackStage
  displayName: Rollback Deployment
  dependsOn: DeployStage
  condition: failed()
  jobs:
    - job: RollbackJob
      displayName: Rollback to Previous Version
      steps:
        - task: PowerShell@2
          displayName: 'Stop App Pool'
          inputs:
            targetType: 'inline'
            script: |
              $appPoolName = "$(appPoolName)"
              try {
                  Import-Module WebAdministration -ErrorAction SilentlyContinue
                  $status = (Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue).Value
                  if ($status -eq "Started") {
                      & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$appPoolName" 2>&1 | Out-Null
                      Write-Host "Successfully stopped App Pool '$appPoolName'"
                  }
                  else {
                      Write-Host "App Pool '$appPoolName' was already stopped"
                  }
              }
              catch {
                  Write-Host "##vso[task.logissue type=warning]Warning: $_"
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$appPoolName" 2>&1 | Out-Null
              }
            failOnStderr: false

        - task: PowerShell@2
          displayName: 'Restore Backup'
          inputs:
            targetType: 'inline'
            script: |
              $backupPath = "$(latestBackupPath)"
              if (-not $backupPath) {
                  $latestBackup = Get-ChildItem "$(backupRootPath)" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                  if ($latestBackup) {
                      $backupPath = $latestBackup.FullName
                      Write-Host "Using latest backup found: $backupPath"
                  }
                  else {
                      Write-Error "No backup folders found in $(backupRootPath)"
                      exit 1
                  }
              }
              if (Test-Path $backupPath) {
                  Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
                  Copy-Item -Recurse -Force "$backupPath\*" "$(deployPath)\"
                  Write-Host "Successfully restored backup from $backupPath"
              }
              else {
                  Write-Error "Backup folder $backupPath not found"
                  exit 1
              }

        - task: PowerShell@2
          displayName: 'Start App Pool After Rollback'
          inputs:
            targetType: 'inline'
            script: |
              & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
              Start-Sleep -Seconds 5
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Started") {
                  Write-Error "App Pool failed to start after rollback (Status: $status)"
                  exit 1
              }
              Write-Host "App Pool started successfully after rollback"