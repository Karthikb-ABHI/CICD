name: Build and Deploy .NET 8 App to Azure VM

trigger:
  branches:
    include:
      - main

pool:
  name: MTPreWeb

variables:
  appPoolName: 'healthinsurance'
  sourcePath: 'E:\Temp\CICDTest_Temp'
  deployPath: 'E:\DeployedProjects\CICDTest'
  backupRootPath: 'E:\Deployments\backup\CICDTest'
  buildConfiguration: 'Release'
  # Proxy with authentication
  proxyUsername: 'HIGRP0255'
  proxyPassword: 'pass@0255'  # ⚠️ Prefer using secret variable for this
  proxyAddress: '185.46.212.88:80'

  HTTP_PROXY: 'http://$(proxyUsername):$(proxyPassword)@$(proxyAddress)'
  HTTPS_PROXY: 'http://$(proxyUsername):$(proxyPassword)@$(proxyAddress)'
  NO_PROXY: 'localhost,127.0.0.1'

stages:
- stage: DeployStage
  displayName: Build and Deploy
  jobs:
    - job: BuildAndDeploy
      displayName: Build & Deploy to IIS
      steps:
        - checkout: self
          clean: true

        - task: PowerShell@2
          displayName: 'Stop App Pool'
          inputs:
            targetType: 'inline'
            script: |
              $appPoolName = "$(appPoolName)"
              try {
                  Import-Module WebAdministration -ErrorAction SilentlyContinue
                  $status = (Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue).Value
                  if ($status -eq "Started") {
                      & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$appPoolName" 2>&1 | Out-Null
                      Write-Host "Successfully stopped App Pool '$appPoolName'"
                  }
                  else {
                      Write-Host "App Pool '$appPoolName' was already stopped"
                  }
              }
              catch {
                  Write-Host "##vso[task.logissue type=warning]Warning: $_"
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$appPoolName" 2>&1 | Out-Null
                  Write-Host "Used fallback method to stop App Pool"
              }
            failOnStderr: false

        - task: PowerShell@2
          displayName: 'Backup Current Deployment'
          inputs:
            targetType: 'inline'
            script: |
              if (Test-Path "$(deployPath)") {
                  $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
                  $backupPath = "$(backupRootPath)\$timestamp"
                  New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
                  Copy-Item -Recurse -Force "$(deployPath)\*" "$backupPath"
                  Write-Host "##vso[task.setvariable variable=latestBackupPath]$backupPath"
              }

        - task: PowerShell@2
          displayName: 'Restore Dependencies'
          inputs:
            targetType: 'inline'
            script: |
              dotnet restore

        - task: PowerShell@2
          displayName: 'Build Project'
          inputs:
            targetType: 'inline'
            script: |
              dotnet build --configuration $(buildConfiguration) --no-restore

        - task: PowerShell@2
          displayName: 'Publish Project'
          inputs:
            targetType: 'inline'
            script: |
              dotnet publish --configuration $(buildConfiguration) --output "$(sourcePath)"

        - task: PowerShell@2
          displayName: 'Deploy to IIS Folder'
          inputs:
            targetType: 'inline'
            script: |
              Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
              Copy-Item -Path "$(sourcePath)\*" -Destination "$(deployPath)\" -Recurse -Force

        - task: PowerShell@2
          displayName: 'Start App Pool + Verify'
          inputs:
            targetType: 'inline'
            script: |
              & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
              Start-Sleep -Seconds 5
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Started") {
                  Write-Error "App Pool failed to start (Current status: $status)"
              }
              else {
                  Write-Host "App Pool started successfully"
              }

- stage: RollbackStage
  displayName: Rollback Deployment
  dependsOn: DeployStage
  condition: failed()
  jobs:
    - job: RollbackJob
      displayName: Rollback to Previous Version
      steps:
        - task: PowerShell@2
          displayName: 'Stop App Pool'
          inputs:
            targetType: 'inline'
            script: |
              $appPoolName = "$(appPoolName)"
              try {
                  Import-Module WebAdministration -ErrorAction SilentlyContinue
                  $status = (Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue).Value
                  if ($status -eq "Started") {
                      & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$appPoolName" 2>&1 | Out-Null
                      Write-Host "Successfully stopped App Pool '$appPoolName'"
                  }
                  else {
                      Write-Host "App Pool '$appPoolName' was already stopped"
                  }
              }
              catch {
                  Write-Host "##vso[task.logissue type=warning]Warning: $_"
                  & "C:\Windows\System32\inetsrv\appcmd" stop apppool "/apppool.name:$appPoolName" 2>&1 | Out-Null
                  Write-Host "Used fallback method to stop App Pool"
              }
            failOnStderr: false

        - task: PowerShell@2
          displayName: 'Restore Backup'
          inputs:
            targetType: 'inline'
            script: |
              $backupPath = "$(latestBackupPath)"
              if (-not $backupPath) {
                  $latestBackup = Get-ChildItem "$(backupRootPath)" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                  if ($latestBackup) {
                      $backupPath = $latestBackup.FullName
                  }
                  else {
                      Write-Error "No backup folders found in $(backupRootPath)"
                      exit 1
                  }
              }
              if (Test-Path $backupPath) {
                  Remove-Item -Recurse -Force "$(deployPath)\*" -ErrorAction SilentlyContinue
                  Copy-Item -Recurse -Force "$backupPath\*" "$(deployPath)\"
                  Write-Host "Successfully restored backup from $backupPath"
              }
              else {
                  Write-Error "Backup folder $backupPath not found"
              }

        - task: PowerShell@2
          displayName: 'Start App Pool After Rollback'
          inputs:
            targetType: 'inline'
            script: |
              & "C:\Windows\System32\inetsrv\appcmd" start apppool "/apppool.name:$(appPoolName)"
              Start-Sleep -Seconds 5
              $status = (Get-WebAppPoolState -Name "$(appPoolName)").Value
              if ($status -ne "Started") {
                  Write-Error "App Pool failed to start after rollback (Status: $status)"
              }
              else {
                  Write-Host "App Pool started successfully after rollback"
              }